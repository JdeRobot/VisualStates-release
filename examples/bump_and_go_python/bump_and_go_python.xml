<?xml version="1.0" ?>
<VisualStates>
  <config type="1">
    <buildDependencies>
      <dependency>roscpp</dependency>
      <dependency>sensor_msgs</dependency>
      <dependency>geometry_msgs</dependency>
      <dependency>nav_msgs</dependency>
      <dependency>tf</dependency>
    </buildDependencies>
    <runDependencies>
      <dependency>roscpp</dependency>
      <dependency>sensor_msgs</dependency>
      <dependency>geometry_msgs</dependency>
      <dependency>nav_msgs</dependency>
      <dependency>tf</dependency>
    </runDependencies>
    <topics>
      <topic id="0">
        <name>/turtlebotROS/mobile_base/commands/velocity</name>
        <type>geometry_msgs/Twist</type>
        <opType>Publish</opType>
      </topic>
      <topic id="1">
        <name>/turtlebotROS/laser/scan</name>
        <type>sensor_msgs/LaserScan</type>
        <opType>Subscribe</opType>
      </topic>
      <topic id="2">
        <name>/turtlebotROS/odom</name>
        <type>nav_msgs/Odometry</type>
        <opType>Subscribe</opType>
      </topic>
    </topics>
  </config>
  <global_namespace>
    <functions></functions>
    <variables></variables>
  </global_namespace>
  <libraries>
    <library>math</library>
    <library>random</library>
    <library>tf</library>
  </libraries>
  <state id="0" initial="True">
    <posx>0.0</posx>
    <posy>0.0</posy>
    <name>root</name>
    <code></code>
    <timestep>100</timestep>
    <namespace>
      <functions>def calculate_obstacle(self):
	laserData = self.globalNamespace.turtlebotROS_laser_scan
	for val in laserData.ranges:
		if val &lt; self.obstacle_threshold:
			self.is_obstacle = True
			return
	self.is_obstacle = False
	
def calculate_yaw(self):
	q = self.globalNamespace.turtlebotROS_odom.pose.pose.orientation #Quaternion
	e_q = [q.x, q.y, q.z, q.w] # Copy Due to ROS Issue
	current_yaw = tf.transformations.euler_from_quaternion(e_q)[2] # Getting YAW
	if current_yaw &gt; self.new_angle:
		self.rotate = True
		self.new_angle = random.uniform(-math.pi, math.pi) # Set new Random Value
		return
	self.rotate = False</functions>
      <variables>self.obstacle_threshold = 0.1
# if very close
self.rotate = False
self.is_obstacle = False
self.new_angle = 0</variables>
    </namespace>
    <state id="1" initial="True">
      <posx>910.0</posx>
      <posy>895.0</posy>
      <name>Go</name>
      <code>velCommand = Twist()
velCommand.linear.x = 0.5
velCommand.angular.z = 0.0
self.globalNamespace.publishturtlebotROS_mobile_base_commands_velocity(velCommand)</code>
      <timestep>100</timestep>
      <namespace>
        <functions></functions>
        <variables></variables>
      </namespace>
      <transition id="1">
        <type>1</type>
        <condition>self.namespace.calculate_obstacle()
return self.namespace.is_obstacle</condition>
        <posx>1008.0</posx>
        <posy>1029.5</posy>
        <name>GoThresh5</name>
        <originid>1</originid>
        <destinationid>2</destinationid>
        <code></code>
      </transition>
    </state>
    <state id="2" initial="False">
      <posx>1054.0</posx>
      <posy>1131.0</posy>
      <name>GetBack</name>
      <code>velCommand = Twist()
velCommand.linear.x = -0.5
velCommand.angular.z = 0.0
self.globalNamespace.publishturtlebotROS_mobile_base_commands_velocity(velCommand)</code>
      <timestep>100</timestep>
      <namespace>
        <functions></functions>
        <variables></variables>
      </namespace>
      <transition id="2">
        <type>0</type>
        <time>1000</time>
        <posx>923.0</posx>
        <posy>1148.5</posy>
        <name>GetBack2Sec</name>
        <originid>2</originid>
        <destinationid>3</destinationid>
        <code></code>
      </transition>
    </state>
    <state id="3" initial="False">
      <posx>792.0</posx>
      <posy>1149.0</posy>
      <name>Rotate</name>
      <code>velCommand = Twist()
velCommand.linear.x = 0.0
velCommand.angular.z = 0.2 # Move always CCW
self.globalNamespace.publishturtlebotROS_mobile_base_commands_velocity(velCommand)</code>
      <timestep>100</timestep>
      <namespace>
        <functions></functions>
        <variables></variables>
      </namespace>
      <transition id="3">
        <type>1</type>
        <condition>self.namespace.calculate_yaw()
return self.namespace.rotate</condition>
        <posx>833.0</posx>
        <posy>1020.0</posy>
        <name>RotateRandom</name>
        <originid>3</originid>
        <destinationid>1</destinationid>
        <code></code>
      </transition>
    </state>
  </state>
</VisualStates>
