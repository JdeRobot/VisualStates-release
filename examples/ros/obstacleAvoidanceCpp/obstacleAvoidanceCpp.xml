<?xml version="1.0" ?>
<VisualStates>
  <config type="1">
    <buildDependencies>
      <dependency>roscpp</dependency>
      <dependency>sensor_msgs</dependency>
      <dependency>geometry_msgs</dependency>
    </buildDependencies>
    <runDependencies>
      <dependency>roscpp</dependency>
      <dependency>sensor_msgs</dependency>
      <dependency>geometry_msgs</dependency>
    </runDependencies>
    <topics>
      <topic id="0">
        <name>/turtlebotROS/mobile_base/commands/velocity</name>
        <type>geometry_msgs/Twist</type>
        <opType>Publish</opType>
      </topic>
      <topic id="1">
        <name>/turtlebotROS/laser/scan</name>
        <type>sensor_msgs/LaserScan</type>
        <opType>Subscribe</opType>
      </topic>
    </topics>
  </config>
  <functions>void calculate_obstacle() {
	sensor_msgs::LaserScan&amp; laserData = getturtlebotROS_laser_scan();
	for (int i = 0; i &lt; laserData.ranges.size(); i++) {
		if (laserData.ranges[i] &lt; obstacle_threshold) {
			is_obstacle = true;
			return;
		}
	}
	is_obstacle = false;
}</functions>
  <variables>float obstacle_threshold = 0.4;
bool is_obstacle = false;
</variables>
  <libraries/>
  <state id="0" initial="True">
    <posx>0.0</posx>
    <posy>0.0</posy>
    <name>root</name>
    <code></code>
    <timestep>100</timestep>
    <state id="1" initial="True">
      <posx>845.0</posx>
      <posy>970.0</posy>
      <name>move</name>
      <code>geometry_msgs::Twist velCommand;
velCommand.linear.x = 0.3;
velCommand.angular.z = 0.0;
node-&gt;publishturtlebotROS_mobile_base_commands_velocity(velCommand);</code>
      <timestep>100</timestep>
      <transition id="1">
        <type>1</type>
        <condition>node-&gt;calculate_obstacle();
return node-&gt;is_obstacle;</condition>
        <posx>931.0</posx>
        <posy>884.0</posy>
        <name>obstacle</name>
        <originid>1</originid>
        <destinationid>2</destinationid>
        <code></code>
      </transition>
    </state>
    <state id="2" initial="False">
      <posx>1023.0</posx>
      <posy>981.0</posy>
      <name>avoid</name>
      <code>geometry_msgs::Twist velCommand;
velCommand.linear.x = 0.0;
velCommand.angular.z = 0.1;
node-&gt;publishturtlebotROS_mobile_base_commands_velocity(velCommand);</code>
      <timestep>100</timestep>
      <transition id="2">
        <type>1</type>
        <condition>node-&gt;calculate_obstacle();
return !node-&gt;is_obstacle;</condition>
        <posx>927.0</posx>
        <posy>1056.0</posy>
        <name>no obstacle</name>
        <originid>2</originid>
        <destinationid>1</destinationid>
        <code></code>
      </transition>
    </state>
  </state>
</VisualStates>
