<?xml version="1.0" ?>
<VisualStates>
  <config type="0">
    <interfaces>
      <interface>
        <serverType>ros</serverType>
        <name>myLaser</name>
        <topic>/turtlebotROS/laser/scan</topic>
        <proxyName></proxyName>
        <ip></ip>
        <port></port>
        <interfaceName>Laser</interfaceName>
      </interface>
      <interface>
        <serverType>ros</serverType>
        <name>myMotors</name>
        <topic>/turtlebotROS/mobile_base/commands/velocity</topic>
        <proxyName></proxyName>
        <ip></ip>
        <port></port>
        <interfaceName>Motors</interfaceName>
      </interface>
    </interfaces>
  </config>
  <functions>def calculate_obstacle(self):
	laserData = self.myLaser.getLaserData()
	for val in laserData.values:
		if (val &lt; self.obstacle_threshold):
			self.is_obstacle = True
			return
	self.is_obstacle = False</functions>
  <variables>self.is_obstacle = False
self.obstacle_threshold = 0.4</variables>
  <libraries/>
  <state id="0" initial="True">
    <posx>0.0</posx>
    <posy>0.0</posy>
    <name>root</name>
    <code></code>
    <timestep>100</timestep>
    <state id="1" initial="True">
      <posx>845.0</posx>
      <posy>970.0</posy>
      <name>move</name>
      <code>self.interfaces.myMotors.sendV(0.2)
self.interfaces.myMotors.sendW(0.0)</code>
      <timestep>100</timestep>
      <transition id="1">
        <type>1</type>
        <condition>self.interfaces.calculate_obstacle()
return self.interfaces.is_obstacle</condition>
        <posx>931.0</posx>
        <posy>884.0</posy>
        <name>obstacle</name>
        <originid>1</originid>
        <destinationid>2</destinationid>
        <code></code>
      </transition>
    </state>
    <state id="2" initial="False">
      <posx>1023.0</posx>
      <posy>981.0</posy>
      <name>avoid</name>
      <code>self.interfaces.myMotors.sendV(0.0)
self.interfaces.myMotors.sendW(0.1)</code>
      <timestep>100</timestep>
      <transition id="2">
        <type>1</type>
        <condition>self.interfaces.calculate_obstacle()
return not self.interfaces.is_obstacle</condition>
        <posx>927.0</posx>
        <posy>1056.0</posy>
        <name>no obstacle</name>
        <originid>2</originid>
        <destinationid>1</destinationid>
        <code></code>
      </transition>
    </state>
  </state>
</VisualStates>
